
driver_development_f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800055c  08000564  00010564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800055c  0800055c  00010564  2**0
                  CONTENTS
  4 .ARM          00000000  0800055c  0800055c  00010564  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800055c  08000564  00010564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800055c  0800055c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000560  08000560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010564  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010564  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001058e  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000804  00000000  00000000  000105d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000024c  00000000  00000000  00010dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000088  00000000  00000000  00011028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000059  00000000  00000000  000110b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001568  00000000  00000000  00011109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000b77  00000000  00000000  00012671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00005b46  00000000  00000000  000131e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000130  00000000  00000000  00018d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00018e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000544 	.word	0x08000544

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000544 	.word	0x08000544

080001e8 <main>:
#include "stm32f407xx.h"

static void GPIO_LedConfig();

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b08a      	sub	sp, #40	; 0x28
 80001ec:	af00      	add	r7, sp, #0
	RCC_GPIOD_CLK_EN();
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	4b47      	ldr	r3, [pc, #284]	; (8000310 <main+0x128>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a46      	ldr	r2, [pc, #280]	; (8000310 <main+0x128>)
 80001f8:	f043 0308 	orr.w	r3, r3, #8
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
 80001fe:	4b44      	ldr	r3, [pc, #272]	; (8000310 <main+0x128>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000202:	f003 0308 	and.w	r3, r3, #8
 8000206:	607b      	str	r3, [r7, #4]
	GPIO_LedConfig();
 8000208:	f000 f888 	bl	800031c <GPIO_LedConfig>
	while(1)
	{
		GPIO_Write_Pin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000212:	4840      	ldr	r0, [pc, #256]	; (8000314 <main+0x12c>)
 8000214:	f000 f959 	bl	80004ca <GPIO_Write_Pin>
		for(uint32_t counter = 0; counter < 999999; counter++);
 8000218:	2300      	movs	r3, #0
 800021a:	627b      	str	r3, [r7, #36]	; 0x24
 800021c:	e002      	b.n	8000224 <main+0x3c>
 800021e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000220:	3301      	adds	r3, #1
 8000222:	627b      	str	r3, [r7, #36]	; 0x24
 8000224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000226:	4a3c      	ldr	r2, [pc, #240]	; (8000318 <main+0x130>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d9f8      	bls.n	800021e <main+0x36>
		GPIO_Write_Pin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000232:	4838      	ldr	r0, [pc, #224]	; (8000314 <main+0x12c>)
 8000234:	f000 f949 	bl	80004ca <GPIO_Write_Pin>
		for(uint32_t counter = 0; counter < 999999; counter++);
 8000238:	2300      	movs	r3, #0
 800023a:	623b      	str	r3, [r7, #32]
 800023c:	e002      	b.n	8000244 <main+0x5c>
 800023e:	6a3b      	ldr	r3, [r7, #32]
 8000240:	3301      	adds	r3, #1
 8000242:	623b      	str	r3, [r7, #32]
 8000244:	6a3b      	ldr	r3, [r7, #32]
 8000246:	4a34      	ldr	r2, [pc, #208]	; (8000318 <main+0x130>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d9f8      	bls.n	800023e <main+0x56>
		GPIO_Write_Pin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000252:	4830      	ldr	r0, [pc, #192]	; (8000314 <main+0x12c>)
 8000254:	f000 f939 	bl	80004ca <GPIO_Write_Pin>
		for(uint32_t counter = 0; counter < 999999; counter++);
 8000258:	2300      	movs	r3, #0
 800025a:	61fb      	str	r3, [r7, #28]
 800025c:	e002      	b.n	8000264 <main+0x7c>
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3301      	adds	r3, #1
 8000262:	61fb      	str	r3, [r7, #28]
 8000264:	69fb      	ldr	r3, [r7, #28]
 8000266:	4a2c      	ldr	r2, [pc, #176]	; (8000318 <main+0x130>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d9f8      	bls.n	800025e <main+0x76>
		GPIO_Write_Pin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000272:	4828      	ldr	r0, [pc, #160]	; (8000314 <main+0x12c>)
 8000274:	f000 f929 	bl	80004ca <GPIO_Write_Pin>
		for(uint32_t counter = 0; counter < 999999; counter++);
 8000278:	2300      	movs	r3, #0
 800027a:	61bb      	str	r3, [r7, #24]
 800027c:	e002      	b.n	8000284 <main+0x9c>
 800027e:	69bb      	ldr	r3, [r7, #24]
 8000280:	3301      	adds	r3, #1
 8000282:	61bb      	str	r3, [r7, #24]
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	4a24      	ldr	r2, [pc, #144]	; (8000318 <main+0x130>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d9f8      	bls.n	800027e <main+0x96>
		GPIO_Write_Pin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000292:	4820      	ldr	r0, [pc, #128]	; (8000314 <main+0x12c>)
 8000294:	f000 f919 	bl	80004ca <GPIO_Write_Pin>
		for(uint32_t counter = 0; counter < 999999; counter++);
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]
 800029c:	e002      	b.n	80002a4 <main+0xbc>
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	3301      	adds	r3, #1
 80002a2:	617b      	str	r3, [r7, #20]
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	4a1c      	ldr	r2, [pc, #112]	; (8000318 <main+0x130>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d9f8      	bls.n	800029e <main+0xb6>
		GPIO_Write_Pin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b2:	4818      	ldr	r0, [pc, #96]	; (8000314 <main+0x12c>)
 80002b4:	f000 f909 	bl	80004ca <GPIO_Write_Pin>
		for(uint32_t counter = 0; counter < 999999; counter++);
 80002b8:	2300      	movs	r3, #0
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	e002      	b.n	80002c4 <main+0xdc>
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	3301      	adds	r3, #1
 80002c2:	613b      	str	r3, [r7, #16]
 80002c4:	693b      	ldr	r3, [r7, #16]
 80002c6:	4a14      	ldr	r2, [pc, #80]	; (8000318 <main+0x130>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d9f8      	bls.n	80002be <main+0xd6>
		GPIO_Write_Pin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002d2:	4810      	ldr	r0, [pc, #64]	; (8000314 <main+0x12c>)
 80002d4:	f000 f8f9 	bl	80004ca <GPIO_Write_Pin>
		for(uint32_t counter = 0; counter < 999999; counter++);
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e002      	b.n	80002e4 <main+0xfc>
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	3301      	adds	r3, #1
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	4a0c      	ldr	r2, [pc, #48]	; (8000318 <main+0x130>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d9f8      	bls.n	80002de <main+0xf6>
		GPIO_Write_Pin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002f2:	4808      	ldr	r0, [pc, #32]	; (8000314 <main+0x12c>)
 80002f4:	f000 f8e9 	bl	80004ca <GPIO_Write_Pin>
		for(uint32_t counter = 0; counter < 999999; counter++);
 80002f8:	2300      	movs	r3, #0
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	e002      	b.n	8000304 <main+0x11c>
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	3301      	adds	r3, #1
 8000302:	60bb      	str	r3, [r7, #8]
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	4a04      	ldr	r2, [pc, #16]	; (8000318 <main+0x130>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d9f8      	bls.n	80002fe <main+0x116>
		GPIO_Write_Pin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800030c:	e77e      	b.n	800020c <main+0x24>
 800030e:	bf00      	nop
 8000310:	40023800 	.word	0x40023800
 8000314:	40020c00 	.word	0x40020c00
 8000318:	000f423e 	.word	0x000f423e

0800031c <GPIO_LedConfig>:
    /* Loop forever */
	for(;;);
}

static void GPIO_LedConfig()
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef ledConfig = {0};
 8000322:	463b      	mov	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
 800032e:	611a      	str	r2, [r3, #16]
 8000330:	615a      	str	r2, [r3, #20]

	ledConfig.pinNumber = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000332:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000336:	603b      	str	r3, [r7, #0]
	ledConfig.Mode = GPIO_MODE_OUTPUT;
 8000338:	2301      	movs	r3, #1
 800033a:	607b      	str	r3, [r7, #4]
	ledConfig.Otype = GPIO_OTYPE_PP;
 800033c:	2300      	movs	r3, #0
 800033e:	60bb      	str	r3, [r7, #8]
	ledConfig.PuPd = GPIO_PUPDR_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
	ledConfig.Speed = GPIO_OSPEED_HIGH;
 8000344:	2302      	movs	r3, #2
 8000346:	613b      	str	r3, [r7, #16]

	GPIO_Init(GPIOD, &ledConfig);
 8000348:	463b      	mov	r3, r7
 800034a:	4619      	mov	r1, r3
 800034c:	4803      	ldr	r0, [pc, #12]	; (800035c <GPIO_LedConfig+0x40>)
 800034e:	f000 f830 	bl	80003b2 <GPIO_Init>
}
 8000352:	bf00      	nop
 8000354:	3718      	adds	r7, #24
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40020c00 	.word	0x40020c00

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000364:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	; (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	; (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 f8b5 	bl	80004fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff ff29 	bl	80001e8 <main>

08000396 <LoopForever>:

LoopForever:
  b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a4:	08000564 	.word	0x08000564
  ldr r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>

080003b2 <GPIO_Init>:
 * @param GPIO_ConfigStruct = GPIO configuration structure
 *
 * @retval void
 */
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_ConfigStruct)
{
 80003b2:	b480      	push	{r7}
 80003b4:	b087      	sub	sp, #28
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
 80003ba:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t fakePosition = 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	613b      	str	r3, [r7, #16]
	uint32_t lastPosition = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
	for (position = 0; position < GPIO_NUMBER_OF_PINS; position++)
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
 80003c8:	e076      	b.n	80004b8 <GPIO_Init+0x106>
	{
		fakePosition = (0x1 << position);
 80003ca:	2201      	movs	r2, #1
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	613b      	str	r3, [r7, #16]
		lastPosition = (uint32_t)( GPIO_ConfigStruct->pinNumber ) & fakePosition;
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	693a      	ldr	r2, [r7, #16]
 80003da:	4013      	ands	r3, r2
 80003dc:	60fb      	str	r3, [r7, #12]

		if (fakePosition == lastPosition)
 80003de:	693a      	ldr	r2, [r7, #16]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d165      	bne.n	80004b2 <GPIO_Init+0x100>
		{
			/*!< Mode config */
			uint32_t tempValue = GPIOx->MODER;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	60bb      	str	r3, [r7, #8]
			tempValue &= ~( 0x3U << (position * 2) );
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	2203      	movs	r2, #3
 80003f2:	fa02 f303 	lsl.w	r3, r2, r3
 80003f6:	43db      	mvns	r3, r3
 80003f8:	68ba      	ldr	r2, [r7, #8]
 80003fa:	4013      	ands	r3, r2
 80003fc:	60bb      	str	r3, [r7, #8]
			tempValue |= ( GPIO_ConfigStruct->Mode << (position * 2) );
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	685a      	ldr	r2, [r3, #4]
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	fa02 f303 	lsl.w	r3, r2, r3
 800040a:	68ba      	ldr	r2, [r7, #8]
 800040c:	4313      	orrs	r3, r2
 800040e:	60bb      	str	r3, [r7, #8]
			GPIOx->MODER = tempValue;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	68ba      	ldr	r2, [r7, #8]
 8000414:	601a      	str	r2, [r3, #0]

			if (GPIO_ConfigStruct->Mode == GPIO_MODE_AF || GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT)
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	2b02      	cmp	r3, #2
 800041c:	d003      	beq.n	8000426 <GPIO_Init+0x74>
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d12d      	bne.n	8000482 <GPIO_Init+0xd0>
			{
				/*!< Otype Config */
				tempValue = GPIOx->OTYPER;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60bb      	str	r3, [r7, #8]
				tempValue &= ~( 0x1U << position );
 800042c:	2201      	movs	r2, #1
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	fa02 f303 	lsl.w	r3, r2, r3
 8000434:	43db      	mvns	r3, r3
 8000436:	68ba      	ldr	r2, [r7, #8]
 8000438:	4013      	ands	r3, r2
 800043a:	60bb      	str	r3, [r7, #8]
				tempValue |= ( GPIO_ConfigStruct->Otype << position );
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	689a      	ldr	r2, [r3, #8]
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	fa02 f303 	lsl.w	r3, r2, r3
 8000446:	68ba      	ldr	r2, [r7, #8]
 8000448:	4313      	orrs	r3, r2
 800044a:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	68ba      	ldr	r2, [r7, #8]
 8000450:	605a      	str	r2, [r3, #4]

				/*!< Ospeed Config */
				tempValue = GPIOx->OSPEEDR;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	689b      	ldr	r3, [r3, #8]
 8000456:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3U <<(position * 2) );
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	2203      	movs	r2, #3
 800045e:	fa02 f303 	lsl.w	r3, r2, r3
 8000462:	43db      	mvns	r3, r3
 8000464:	68ba      	ldr	r2, [r7, #8]
 8000466:	4013      	ands	r3, r2
 8000468:	60bb      	str	r3, [r7, #8]
				tempValue |= ( GPIO_ConfigStruct->Speed << (position * 2) );
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	691a      	ldr	r2, [r3, #16]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	4313      	orrs	r3, r2
 800047a:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	68ba      	ldr	r2, [r7, #8]
 8000480:	609a      	str	r2, [r3, #8]
			}

			/*!< Push-Pull Config */
			tempValue = GPIOx->PUPDR;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	60bb      	str	r3, [r7, #8]
			tempValue &= ~( 0x3U << (position * 2) );
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	2203      	movs	r2, #3
 800048e:	fa02 f303 	lsl.w	r3, r2, r3
 8000492:	43db      	mvns	r3, r3
 8000494:	68ba      	ldr	r2, [r7, #8]
 8000496:	4013      	ands	r3, r2
 8000498:	60bb      	str	r3, [r7, #8]
			tempValue |= ( GPIO_ConfigStruct->PuPd << (position * 2) );
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	68da      	ldr	r2, [r3, #12]
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	68ba      	ldr	r2, [r7, #8]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	60da      	str	r2, [r3, #12]
	for (position = 0; position < GPIO_NUMBER_OF_PINS; position++)
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	3301      	adds	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	2b0f      	cmp	r3, #15
 80004bc:	d985      	bls.n	80003ca <GPIO_Init+0x18>
		}
	}
}
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
 80004c2:	371c      	adds	r7, #28
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr

080004ca <GPIO_Write_Pin>:
 * @param pinState = GPIO_PIN_SET or GPIO_PIN_RESET
 *
 * @retval void
 */
void GPIO_Write_Pin(GPIO_TypeDef *GPIOx, uint16_t pinNumber, GPIO_PinState pinState)
{
 80004ca:	b480      	push	{r7}
 80004cc:	b083      	sub	sp, #12
 80004ce:	af00      	add	r7, sp, #0
 80004d0:	6078      	str	r0, [r7, #4]
 80004d2:	460b      	mov	r3, r1
 80004d4:	807b      	strh	r3, [r7, #2]
 80004d6:	4613      	mov	r3, r2
 80004d8:	707b      	strb	r3, [r7, #1]
	if (pinState == GPIO_PIN_SET)
 80004da:	787b      	ldrb	r3, [r7, #1]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d103      	bne.n	80004e8 <GPIO_Write_Pin+0x1e>
	{
		GPIOx->BSRR = pinNumber;
 80004e0:	887a      	ldrh	r2, [r7, #2]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	619a      	str	r2, [r3, #24]
	}
	else
	{
		GPIOx->BSRR = (pinNumber << 16);
	}
}
 80004e6:	e004      	b.n	80004f2 <GPIO_Write_Pin+0x28>
		GPIOx->BSRR = (pinNumber << 16);
 80004e8:	887b      	ldrh	r3, [r7, #2]
 80004ea:	041b      	lsls	r3, r3, #16
 80004ec:	461a      	mov	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	619a      	str	r2, [r3, #24]
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	4d0d      	ldr	r5, [pc, #52]	; (8000534 <__libc_init_array+0x38>)
 8000500:	4c0d      	ldr	r4, [pc, #52]	; (8000538 <__libc_init_array+0x3c>)
 8000502:	1b64      	subs	r4, r4, r5
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	2600      	movs	r6, #0
 8000508:	42a6      	cmp	r6, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	4d0b      	ldr	r5, [pc, #44]	; (800053c <__libc_init_array+0x40>)
 800050e:	4c0c      	ldr	r4, [pc, #48]	; (8000540 <__libc_init_array+0x44>)
 8000510:	f000 f818 	bl	8000544 <_init>
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	2600      	movs	r6, #0
 800051a:	42a6      	cmp	r6, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f855 3b04 	ldr.w	r3, [r5], #4
 8000524:	4798      	blx	r3
 8000526:	3601      	adds	r6, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f855 3b04 	ldr.w	r3, [r5], #4
 800052e:	4798      	blx	r3
 8000530:	3601      	adds	r6, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	0800055c 	.word	0x0800055c
 8000538:	0800055c 	.word	0x0800055c
 800053c:	0800055c 	.word	0x0800055c
 8000540:	08000560 	.word	0x08000560

08000544 <_init>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr

08000550 <_fini>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr
